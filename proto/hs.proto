syntax = "proto3";
package proto;

option go_package="pb/hs";

import "google/api/annotations.proto";
import "proto3/include/google/protobuf/any.proto";

message Username {
    string username = 1;
}

message Email {
    string email = 1;
}

message UsernameAndEmail {
    string username = 1;
    string email = 2;
}

message UsernameAndPassword {
    string username = 1;
    string password = 2;
}

message SignUpRequest {
    string username = 1;
    string password = 2;
    string personal = 3;
    string email = 4;
    string type = 5;
    repeated google.protobuf.Any picture = 6;
    string phone = 7;
    string bio = 8;
}

message UpdateProfile {
    string username = 1;
    string type = 2;
    string phone = 3;
    string bio = 4;
}

message UpdatePicture {
    string username = 1;
    repeated google.protobuf.Any picture = 2;
}

message UpdateEmail {
    string username = 1;
    string email = 2;
}

message StringResponse {
    string response = 1;
}

message PersonalProfile {
    string username = 1;
	string email = 2;
    string type = 3;
	string picture = 4;
    string phone = 5;
    string bio = 6;
    repeated google.protobuf.Any portfolio = 7;
    repeated google.protobuf.Any messages = 8;
}

message UserProfile {
    string username = 1;
	string email = 2;
    string type = 3;
	string picture = 4;
    string phone = 5;
    string bio = 6;
    repeated google.protobuf.Any portfolio = 7;
}

message Estate {
    string id = 1;
    string username = 2;
    string description = 3;
    string type = 4;
    string price = 5;
    string downpayment = 6;
    string sittingroom = 7;
    string bedroom = 8;
    string hybrid = 9;
    string bathroom = 10;
    string toilet = 11;
    string active = 12;
    string likes = 13;
    repeated google.protobuf.Any media = 14;
    repeated google.protobuf.Any comments = 15;
}

message Estates {
    repeated google.protobuf.Any estates = 1;
}

message Category {
    string category =1;
}

message Comment {
    string text =1;
}

message List {
    string id = 1;
    string username = 2;
    string description = 3;
    string type = 4;
    string price = 5;
    string downpayment = 6;
    string sittingroom = 7;
    string hybrid = 8;
    string bedroom = 9;
    string bathroom = 10;
    repeated google.protobuf.Any media = 11;
}

message Id {
    string id = 1;
}

message Edit {
    string id = 1;
    string username = 2;
    string description = 3;
    string price = 4;
    string downpayment = 5;
}

message TextComment {
    repeated google.protobuf.Any ids = 1;
    string username = 2;
    string text = 3;
}

message LikeComment {
    repeated google.protobuf.Any ids = 1;
}

message TextMessage {
    string username = 1;
    string text = 2;
    string time = 4;
}

service HabitatService {
    rpc ContinueWithEmail (Email) returns (StringResponse) {
        option(google.api.http) = {
            get: "/auth/continuewithemail/{email}"
        };
    }

    rpc SignUp (SignUpRequest) returns (StringResponse) {
        option(google.api.http) = {
            post: "/auth/signup"
            body: "*"
        };
    }

    rpc LogIn (UsernameAndPassword) returns (StringResponse) {
        option(google.api.http) = {
            post: "/auth/login"
            body: "*"
        };
    }
    
    
    rpc ProfileUpdate (UpdateProfile) returns (StringResponse) {
        option(google.api.http) = {
            post: "/user/updateprofile"
            body: "*"
        };
    }
    
    rpc PictureUpdate (UpdatePicture) returns (StringResponse) {
        option(google.api.http) = {
            post: "/user/updatepicture"
            body: "*"
        };
    }

    rpc GetOldPasswordConfirmation (Username) returns (StringResponse) {
        option(google.api.http) = {
            get: "/user/getoldpassword/{username}"
        };
    }

    rpc PasswordUpdate (UsernameAndPassword) returns (StringResponse) {
        option(google.api.http) = {
            post: "/user/updatepasssword"
            body: "*"
        };
    }
    
    rpc GetPersonalProfile (Username) returns (PersonalProfile) {
        option(google.api.http) = {
            get: "/user/getpersonalprofile/{username}"
        };
    }

    rpc GetUserProfile (Username) returns (UserProfile) {
        option(google.api.http) = {
            get: "/user/getuserprofile/{username}"
        };
    }

    rpc EmailPasswordRecovery (UsernameAndEmail) returns (StringResponse) {
        option(google.api.http) = {
            post: "/account/passwordrecoverywithemail"
            body: "*"
        };
    }

    rpc UsernamePasswordRecovery (Username) returns (StringResponse) {
        option(google.api.http) = {
            get: "/account/passwordrecoverywithusername/{username}"
        };
    }

    rpc AccountRecoveryWithUsername (Username) returns (StringResponse) {
        option(google.api.http) = {
            get: "/account/accountrecoverywithusername/{username}"
        };
    }

    rpc AccountRecoveryWithEmail (Email) returns (StringResponse) {
        option(google.api.http) = {
            get: "/account/accountrecoverywithemail/{email}"
        };
    }

    rpc PostEstate (List) returns (StringResponse) {
        option(google.api.http) = {
            post: "/estate/postestate"
            body: "*"
        };
    }

    rpc EditEstate (Edit) returns (StringResponse) {
        option(google.api.http) = {
            post: "/estate/editestate"
            body: "*"
        };
    }
    
    rpc GetEstateById (Id) returns (Estate) {
        option(google.api.http) = {
            get: "/estate/getestatebyid/{id}"
        };
    }

    rpc GetEstateByUsername (Username) returns (Estates) {
        option(google.api.http) = {
            get: "/estate/getestatebyusername/{username}"
        };
    }

    rpc DeleteEstate (Id) returns (StringResponse) {
        option(google.api.http) = {
            get: "/estate/deleteestate/{id}"
        };
    }


    rpc StreamAllEstate (Category) returns (stream Estates) {
        option(google.api.http) = {
            get: "/estate/streamall/{category}"
        };
    }

    rpc StreamCategoryEstate (Category) returns (stream Estates) {
        option(google.api.http) = {
            get: "/estate/streamcategory/{category}"
        };
    }

    rpc LikeEstate (Id) returns (StringResponse) {
        option(google.api.http) = {
            get: "/estate/like/{id}"
        };
    }

    rpc CommentWithText (TextComment) returns (StringResponse) {
        option(google.api.http) = {
            post: "/comment/text"
            body: "*"
        };
    }

    rpc LikeAComment (LikeComment) returns (StringResponse) {
        option(google.api.http) = {
            post: "/comment/like"
            body: "*"
        };
    }

    rpc MessageWithText (TextMessage) returns (StringResponse) {
        option(google.api.http) = {
            post: "/message/text"
            body: "*"
        };
    }
}