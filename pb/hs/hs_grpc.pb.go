// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: proto/hs.proto

package hs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HabitatService_ContinueWithEmail_FullMethodName           = "/proto.HabitatService/ContinueWithEmail"
	HabitatService_SignUp_FullMethodName                      = "/proto.HabitatService/SignUp"
	HabitatService_LogIn_FullMethodName                       = "/proto.HabitatService/LogIn"
	HabitatService_ProfileUpdate_FullMethodName               = "/proto.HabitatService/ProfileUpdate"
	HabitatService_PictureUpdate_FullMethodName               = "/proto.HabitatService/PictureUpdate"
	HabitatService_GetOldPasswordConfirmation_FullMethodName  = "/proto.HabitatService/GetOldPasswordConfirmation"
	HabitatService_PasswordUpdate_FullMethodName              = "/proto.HabitatService/PasswordUpdate"
	HabitatService_GetPersonalProfile_FullMethodName          = "/proto.HabitatService/GetPersonalProfile"
	HabitatService_GetUserProfile_FullMethodName              = "/proto.HabitatService/GetUserProfile"
	HabitatService_EmailPasswordRecovery_FullMethodName       = "/proto.HabitatService/EmailPasswordRecovery"
	HabitatService_UsernamePasswordRecovery_FullMethodName    = "/proto.HabitatService/UsernamePasswordRecovery"
	HabitatService_AccountRecoveryWithUsername_FullMethodName = "/proto.HabitatService/AccountRecoveryWithUsername"
	HabitatService_AccountRecoveryWithEmail_FullMethodName    = "/proto.HabitatService/AccountRecoveryWithEmail"
	HabitatService_PostEstate_FullMethodName                  = "/proto.HabitatService/PostEstate"
	HabitatService_EditEstate_FullMethodName                  = "/proto.HabitatService/EditEstate"
	HabitatService_GetEstateById_FullMethodName               = "/proto.HabitatService/GetEstateById"
	HabitatService_GetEstateByUsername_FullMethodName         = "/proto.HabitatService/GetEstateByUsername"
	HabitatService_DeleteEstate_FullMethodName                = "/proto.HabitatService/DeleteEstate"
	HabitatService_StreamAllEstate_FullMethodName             = "/proto.HabitatService/StreamAllEstate"
	HabitatService_StreamCategoryEstate_FullMethodName        = "/proto.HabitatService/StreamCategoryEstate"
	HabitatService_LikeEstate_FullMethodName                  = "/proto.HabitatService/LikeEstate"
	HabitatService_CommentWithText_FullMethodName             = "/proto.HabitatService/CommentWithText"
	HabitatService_LikeAComment_FullMethodName                = "/proto.HabitatService/LikeAComment"
	HabitatService_MessageWithText_FullMethodName             = "/proto.HabitatService/MessageWithText"
)

// HabitatServiceClient is the client API for HabitatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HabitatServiceClient interface {
	ContinueWithEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*StringResponse, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*StringResponse, error)
	LogIn(ctx context.Context, in *UsernameAndPassword, opts ...grpc.CallOption) (*StringResponse, error)
	ProfileUpdate(ctx context.Context, in *UpdateProfile, opts ...grpc.CallOption) (*StringResponse, error)
	PictureUpdate(ctx context.Context, in *UpdatePicture, opts ...grpc.CallOption) (*StringResponse, error)
	GetOldPasswordConfirmation(ctx context.Context, in *Username, opts ...grpc.CallOption) (*StringResponse, error)
	PasswordUpdate(ctx context.Context, in *UsernameAndPassword, opts ...grpc.CallOption) (*StringResponse, error)
	GetPersonalProfile(ctx context.Context, in *Username, opts ...grpc.CallOption) (*PersonalProfile, error)
	GetUserProfile(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UserProfile, error)
	EmailPasswordRecovery(ctx context.Context, in *UsernameAndEmail, opts ...grpc.CallOption) (*StringResponse, error)
	UsernamePasswordRecovery(ctx context.Context, in *Username, opts ...grpc.CallOption) (*StringResponse, error)
	AccountRecoveryWithUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*StringResponse, error)
	AccountRecoveryWithEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*StringResponse, error)
	PostEstate(ctx context.Context, in *List, opts ...grpc.CallOption) (*StringResponse, error)
	EditEstate(ctx context.Context, in *Edit, opts ...grpc.CallOption) (*StringResponse, error)
	GetEstateById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Estate, error)
	GetEstateByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Estates, error)
	DeleteEstate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StringResponse, error)
	StreamAllEstate(ctx context.Context, in *Category, opts ...grpc.CallOption) (HabitatService_StreamAllEstateClient, error)
	StreamCategoryEstate(ctx context.Context, in *Category, opts ...grpc.CallOption) (HabitatService_StreamCategoryEstateClient, error)
	LikeEstate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StringResponse, error)
	CommentWithText(ctx context.Context, in *TextComment, opts ...grpc.CallOption) (*StringResponse, error)
	LikeAComment(ctx context.Context, in *LikeComment, opts ...grpc.CallOption) (*StringResponse, error)
	MessageWithText(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*StringResponse, error)
}

type habitatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHabitatServiceClient(cc grpc.ClientConnInterface) HabitatServiceClient {
	return &habitatServiceClient{cc}
}

func (c *habitatServiceClient) ContinueWithEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_ContinueWithEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) LogIn(ctx context.Context, in *UsernameAndPassword, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_LogIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) ProfileUpdate(ctx context.Context, in *UpdateProfile, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_ProfileUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) PictureUpdate(ctx context.Context, in *UpdatePicture, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_PictureUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) GetOldPasswordConfirmation(ctx context.Context, in *Username, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_GetOldPasswordConfirmation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) PasswordUpdate(ctx context.Context, in *UsernameAndPassword, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_PasswordUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) GetPersonalProfile(ctx context.Context, in *Username, opts ...grpc.CallOption) (*PersonalProfile, error) {
	out := new(PersonalProfile)
	err := c.cc.Invoke(ctx, HabitatService_GetPersonalProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) GetUserProfile(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UserProfile, error) {
	out := new(UserProfile)
	err := c.cc.Invoke(ctx, HabitatService_GetUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) EmailPasswordRecovery(ctx context.Context, in *UsernameAndEmail, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_EmailPasswordRecovery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) UsernamePasswordRecovery(ctx context.Context, in *Username, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_UsernamePasswordRecovery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) AccountRecoveryWithUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_AccountRecoveryWithUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) AccountRecoveryWithEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_AccountRecoveryWithEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) PostEstate(ctx context.Context, in *List, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_PostEstate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) EditEstate(ctx context.Context, in *Edit, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_EditEstate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) GetEstateById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Estate, error) {
	out := new(Estate)
	err := c.cc.Invoke(ctx, HabitatService_GetEstateById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) GetEstateByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Estates, error) {
	out := new(Estates)
	err := c.cc.Invoke(ctx, HabitatService_GetEstateByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) DeleteEstate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_DeleteEstate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) StreamAllEstate(ctx context.Context, in *Category, opts ...grpc.CallOption) (HabitatService_StreamAllEstateClient, error) {
	stream, err := c.cc.NewStream(ctx, &HabitatService_ServiceDesc.Streams[0], HabitatService_StreamAllEstate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &habitatServiceStreamAllEstateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HabitatService_StreamAllEstateClient interface {
	Recv() (*Estates, error)
	grpc.ClientStream
}

type habitatServiceStreamAllEstateClient struct {
	grpc.ClientStream
}

func (x *habitatServiceStreamAllEstateClient) Recv() (*Estates, error) {
	m := new(Estates)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *habitatServiceClient) StreamCategoryEstate(ctx context.Context, in *Category, opts ...grpc.CallOption) (HabitatService_StreamCategoryEstateClient, error) {
	stream, err := c.cc.NewStream(ctx, &HabitatService_ServiceDesc.Streams[1], HabitatService_StreamCategoryEstate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &habitatServiceStreamCategoryEstateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HabitatService_StreamCategoryEstateClient interface {
	Recv() (*Estates, error)
	grpc.ClientStream
}

type habitatServiceStreamCategoryEstateClient struct {
	grpc.ClientStream
}

func (x *habitatServiceStreamCategoryEstateClient) Recv() (*Estates, error) {
	m := new(Estates)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *habitatServiceClient) LikeEstate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_LikeEstate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) CommentWithText(ctx context.Context, in *TextComment, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_CommentWithText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) LikeAComment(ctx context.Context, in *LikeComment, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_LikeAComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitatServiceClient) MessageWithText(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, HabitatService_MessageWithText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HabitatServiceServer is the server API for HabitatService service.
// All implementations must embed UnimplementedHabitatServiceServer
// for forward compatibility
type HabitatServiceServer interface {
	ContinueWithEmail(context.Context, *Email) (*StringResponse, error)
	SignUp(context.Context, *SignUpRequest) (*StringResponse, error)
	LogIn(context.Context, *UsernameAndPassword) (*StringResponse, error)
	ProfileUpdate(context.Context, *UpdateProfile) (*StringResponse, error)
	PictureUpdate(context.Context, *UpdatePicture) (*StringResponse, error)
	GetOldPasswordConfirmation(context.Context, *Username) (*StringResponse, error)
	PasswordUpdate(context.Context, *UsernameAndPassword) (*StringResponse, error)
	GetPersonalProfile(context.Context, *Username) (*PersonalProfile, error)
	GetUserProfile(context.Context, *Username) (*UserProfile, error)
	EmailPasswordRecovery(context.Context, *UsernameAndEmail) (*StringResponse, error)
	UsernamePasswordRecovery(context.Context, *Username) (*StringResponse, error)
	AccountRecoveryWithUsername(context.Context, *Username) (*StringResponse, error)
	AccountRecoveryWithEmail(context.Context, *Email) (*StringResponse, error)
	PostEstate(context.Context, *List) (*StringResponse, error)
	EditEstate(context.Context, *Edit) (*StringResponse, error)
	GetEstateById(context.Context, *Id) (*Estate, error)
	GetEstateByUsername(context.Context, *Username) (*Estates, error)
	DeleteEstate(context.Context, *Id) (*StringResponse, error)
	StreamAllEstate(*Category, HabitatService_StreamAllEstateServer) error
	StreamCategoryEstate(*Category, HabitatService_StreamCategoryEstateServer) error
	LikeEstate(context.Context, *Id) (*StringResponse, error)
	CommentWithText(context.Context, *TextComment) (*StringResponse, error)
	LikeAComment(context.Context, *LikeComment) (*StringResponse, error)
	MessageWithText(context.Context, *TextMessage) (*StringResponse, error)
	mustEmbedUnimplementedHabitatServiceServer()
}

// UnimplementedHabitatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHabitatServiceServer struct {
}

func (UnimplementedHabitatServiceServer) ContinueWithEmail(context.Context, *Email) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueWithEmail not implemented")
}
func (UnimplementedHabitatServiceServer) SignUp(context.Context, *SignUpRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedHabitatServiceServer) LogIn(context.Context, *UsernameAndPassword) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIn not implemented")
}
func (UnimplementedHabitatServiceServer) ProfileUpdate(context.Context, *UpdateProfile) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileUpdate not implemented")
}
func (UnimplementedHabitatServiceServer) PictureUpdate(context.Context, *UpdatePicture) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PictureUpdate not implemented")
}
func (UnimplementedHabitatServiceServer) GetOldPasswordConfirmation(context.Context, *Username) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOldPasswordConfirmation not implemented")
}
func (UnimplementedHabitatServiceServer) PasswordUpdate(context.Context, *UsernameAndPassword) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordUpdate not implemented")
}
func (UnimplementedHabitatServiceServer) GetPersonalProfile(context.Context, *Username) (*PersonalProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalProfile not implemented")
}
func (UnimplementedHabitatServiceServer) GetUserProfile(context.Context, *Username) (*UserProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedHabitatServiceServer) EmailPasswordRecovery(context.Context, *UsernameAndEmail) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailPasswordRecovery not implemented")
}
func (UnimplementedHabitatServiceServer) UsernamePasswordRecovery(context.Context, *Username) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsernamePasswordRecovery not implemented")
}
func (UnimplementedHabitatServiceServer) AccountRecoveryWithUsername(context.Context, *Username) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRecoveryWithUsername not implemented")
}
func (UnimplementedHabitatServiceServer) AccountRecoveryWithEmail(context.Context, *Email) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRecoveryWithEmail not implemented")
}
func (UnimplementedHabitatServiceServer) PostEstate(context.Context, *List) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostEstate not implemented")
}
func (UnimplementedHabitatServiceServer) EditEstate(context.Context, *Edit) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEstate not implemented")
}
func (UnimplementedHabitatServiceServer) GetEstateById(context.Context, *Id) (*Estate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstateById not implemented")
}
func (UnimplementedHabitatServiceServer) GetEstateByUsername(context.Context, *Username) (*Estates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstateByUsername not implemented")
}
func (UnimplementedHabitatServiceServer) DeleteEstate(context.Context, *Id) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEstate not implemented")
}
func (UnimplementedHabitatServiceServer) StreamAllEstate(*Category, HabitatService_StreamAllEstateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAllEstate not implemented")
}
func (UnimplementedHabitatServiceServer) StreamCategoryEstate(*Category, HabitatService_StreamCategoryEstateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCategoryEstate not implemented")
}
func (UnimplementedHabitatServiceServer) LikeEstate(context.Context, *Id) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeEstate not implemented")
}
func (UnimplementedHabitatServiceServer) CommentWithText(context.Context, *TextComment) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentWithText not implemented")
}
func (UnimplementedHabitatServiceServer) LikeAComment(context.Context, *LikeComment) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeAComment not implemented")
}
func (UnimplementedHabitatServiceServer) MessageWithText(context.Context, *TextMessage) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageWithText not implemented")
}
func (UnimplementedHabitatServiceServer) mustEmbedUnimplementedHabitatServiceServer() {}

// UnsafeHabitatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HabitatServiceServer will
// result in compilation errors.
type UnsafeHabitatServiceServer interface {
	mustEmbedUnimplementedHabitatServiceServer()
}

func RegisterHabitatServiceServer(s grpc.ServiceRegistrar, srv HabitatServiceServer) {
	s.RegisterService(&HabitatService_ServiceDesc, srv)
}

func _HabitatService_ContinueWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).ContinueWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_ContinueWithEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).ContinueWithEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameAndPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_LogIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).LogIn(ctx, req.(*UsernameAndPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_ProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).ProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_ProfileUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).ProfileUpdate(ctx, req.(*UpdateProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_PictureUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePicture)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).PictureUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_PictureUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).PictureUpdate(ctx, req.(*UpdatePicture))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_GetOldPasswordConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).GetOldPasswordConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_GetOldPasswordConfirmation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).GetOldPasswordConfirmation(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_PasswordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameAndPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).PasswordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_PasswordUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).PasswordUpdate(ctx, req.(*UsernameAndPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_GetPersonalProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).GetPersonalProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_GetPersonalProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).GetPersonalProfile(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).GetUserProfile(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_EmailPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameAndEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).EmailPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_EmailPasswordRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).EmailPasswordRecovery(ctx, req.(*UsernameAndEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_UsernamePasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).UsernamePasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_UsernamePasswordRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).UsernamePasswordRecovery(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_AccountRecoveryWithUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).AccountRecoveryWithUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_AccountRecoveryWithUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).AccountRecoveryWithUsername(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_AccountRecoveryWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).AccountRecoveryWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_AccountRecoveryWithEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).AccountRecoveryWithEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_PostEstate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).PostEstate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_PostEstate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).PostEstate(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_EditEstate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).EditEstate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_EditEstate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).EditEstate(ctx, req.(*Edit))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_GetEstateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).GetEstateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_GetEstateById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).GetEstateById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_GetEstateByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).GetEstateByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_GetEstateByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).GetEstateByUsername(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_DeleteEstate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).DeleteEstate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_DeleteEstate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).DeleteEstate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_StreamAllEstate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Category)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HabitatServiceServer).StreamAllEstate(m, &habitatServiceStreamAllEstateServer{stream})
}

type HabitatService_StreamAllEstateServer interface {
	Send(*Estates) error
	grpc.ServerStream
}

type habitatServiceStreamAllEstateServer struct {
	grpc.ServerStream
}

func (x *habitatServiceStreamAllEstateServer) Send(m *Estates) error {
	return x.ServerStream.SendMsg(m)
}

func _HabitatService_StreamCategoryEstate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Category)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HabitatServiceServer).StreamCategoryEstate(m, &habitatServiceStreamCategoryEstateServer{stream})
}

type HabitatService_StreamCategoryEstateServer interface {
	Send(*Estates) error
	grpc.ServerStream
}

type habitatServiceStreamCategoryEstateServer struct {
	grpc.ServerStream
}

func (x *habitatServiceStreamCategoryEstateServer) Send(m *Estates) error {
	return x.ServerStream.SendMsg(m)
}

func _HabitatService_LikeEstate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).LikeEstate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_LikeEstate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).LikeEstate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_CommentWithText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).CommentWithText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_CommentWithText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).CommentWithText(ctx, req.(*TextComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_LikeAComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).LikeAComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_LikeAComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).LikeAComment(ctx, req.(*LikeComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitatService_MessageWithText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitatServiceServer).MessageWithText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HabitatService_MessageWithText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitatServiceServer).MessageWithText(ctx, req.(*TextMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// HabitatService_ServiceDesc is the grpc.ServiceDesc for HabitatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HabitatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HabitatService",
	HandlerType: (*HabitatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContinueWithEmail",
			Handler:    _HabitatService_ContinueWithEmail_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _HabitatService_SignUp_Handler,
		},
		{
			MethodName: "LogIn",
			Handler:    _HabitatService_LogIn_Handler,
		},
		{
			MethodName: "ProfileUpdate",
			Handler:    _HabitatService_ProfileUpdate_Handler,
		},
		{
			MethodName: "PictureUpdate",
			Handler:    _HabitatService_PictureUpdate_Handler,
		},
		{
			MethodName: "GetOldPasswordConfirmation",
			Handler:    _HabitatService_GetOldPasswordConfirmation_Handler,
		},
		{
			MethodName: "PasswordUpdate",
			Handler:    _HabitatService_PasswordUpdate_Handler,
		},
		{
			MethodName: "GetPersonalProfile",
			Handler:    _HabitatService_GetPersonalProfile_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _HabitatService_GetUserProfile_Handler,
		},
		{
			MethodName: "EmailPasswordRecovery",
			Handler:    _HabitatService_EmailPasswordRecovery_Handler,
		},
		{
			MethodName: "UsernamePasswordRecovery",
			Handler:    _HabitatService_UsernamePasswordRecovery_Handler,
		},
		{
			MethodName: "AccountRecoveryWithUsername",
			Handler:    _HabitatService_AccountRecoveryWithUsername_Handler,
		},
		{
			MethodName: "AccountRecoveryWithEmail",
			Handler:    _HabitatService_AccountRecoveryWithEmail_Handler,
		},
		{
			MethodName: "PostEstate",
			Handler:    _HabitatService_PostEstate_Handler,
		},
		{
			MethodName: "EditEstate",
			Handler:    _HabitatService_EditEstate_Handler,
		},
		{
			MethodName: "GetEstateById",
			Handler:    _HabitatService_GetEstateById_Handler,
		},
		{
			MethodName: "GetEstateByUsername",
			Handler:    _HabitatService_GetEstateByUsername_Handler,
		},
		{
			MethodName: "DeleteEstate",
			Handler:    _HabitatService_DeleteEstate_Handler,
		},
		{
			MethodName: "LikeEstate",
			Handler:    _HabitatService_LikeEstate_Handler,
		},
		{
			MethodName: "CommentWithText",
			Handler:    _HabitatService_CommentWithText_Handler,
		},
		{
			MethodName: "LikeAComment",
			Handler:    _HabitatService_LikeAComment_Handler,
		},
		{
			MethodName: "MessageWithText",
			Handler:    _HabitatService_MessageWithText_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAllEstate",
			Handler:       _HabitatService_StreamAllEstate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamCategoryEstate",
			Handler:       _HabitatService_StreamCategoryEstate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/hs.proto",
}
